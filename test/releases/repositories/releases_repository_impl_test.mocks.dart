// Mocks generated by Mockito 5.4.0 from annotations
// in musicday_mobile/test/releases/repositories/releases_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:musicday_mobile/core/logging/logger.dart' as _i3;
import 'package:musicday_mobile/core/logging/logger_factory.dart' as _i11;
import 'package:musicday_mobile/releases/dtos/album_by_id_response.dart' as _i7;
import 'package:musicday_mobile/releases/dtos/delete_review_response.dart'
    as _i10;
import 'package:musicday_mobile/releases/dtos/send_review_request.dart' as _i9;
import 'package:musicday_mobile/releases/dtos/send_review_response.dart' as _i8;
import 'package:musicday_mobile/releases/dtos/song_by_id_response.dart' as _i6;
import 'package:musicday_mobile/releases/network/releases_remote_service.dart'
    as _i4;
import 'package:retrofit/retrofit.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_1 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ReleasesRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReleasesRemoteService extends _i1.Mock
    implements _i4.ReleasesRemoteService {
  @override
  _i5.Future<_i2.HttpResponse<_i6.SongByIdResponse>> getSongById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSongById,
          [id],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i6.SongByIdResponse>>.value(
            _FakeHttpResponse_0<_i6.SongByIdResponse>(
          this,
          Invocation.method(
            #getSongById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.HttpResponse<_i6.SongByIdResponse>>.value(
                _FakeHttpResponse_0<_i6.SongByIdResponse>(
          this,
          Invocation.method(
            #getSongById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i6.SongByIdResponse>>);
  @override
  _i5.Future<_i2.HttpResponse<_i7.AlbumByIdResponse>> getAlbumById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbumById,
          [id],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i7.AlbumByIdResponse>>.value(
            _FakeHttpResponse_0<_i7.AlbumByIdResponse>(
          this,
          Invocation.method(
            #getAlbumById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.HttpResponse<_i7.AlbumByIdResponse>>.value(
                _FakeHttpResponse_0<_i7.AlbumByIdResponse>(
          this,
          Invocation.method(
            #getAlbumById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i7.AlbumByIdResponse>>);
  @override
  _i5.Future<_i2.HttpResponse<_i8.SendReviewResponse>> sendReview(
    String? id,
    _i9.SendReviewRequest? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendReview,
          [
            id,
            body,
          ],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i8.SendReviewResponse>>.value(
            _FakeHttpResponse_0<_i8.SendReviewResponse>(
          this,
          Invocation.method(
            #sendReview,
            [
              id,
              body,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.HttpResponse<_i8.SendReviewResponse>>.value(
                _FakeHttpResponse_0<_i8.SendReviewResponse>(
          this,
          Invocation.method(
            #sendReview,
            [
              id,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i8.SendReviewResponse>>);
  @override
  _i5.Future<_i2.HttpResponse<_i10.DeleteReviewResponse>> deleteReview(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReview,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<_i10.DeleteReviewResponse>>.value(
                _FakeHttpResponse_0<_i10.DeleteReviewResponse>(
          this,
          Invocation.method(
            #deleteReview,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.HttpResponse<_i10.DeleteReviewResponse>>.value(
                _FakeHttpResponse_0<_i10.DeleteReviewResponse>(
          this,
          Invocation.method(
            #deleteReview,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i10.DeleteReviewResponse>>);
}

/// A class which mocks [LoggerFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerFactory extends _i1.Mock implements _i11.LoggerFactory {
  @override
  _i3.Logger create(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [tag],
        ),
        returnValue: _FakeLogger_1(
          this,
          Invocation.method(
            #create,
            [tag],
          ),
        ),
        returnValueForMissingStub: _FakeLogger_1(
          this,
          Invocation.method(
            #create,
            [tag],
          ),
        ),
      ) as _i3.Logger);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i3.Logger {
  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void warn(
    String? message, {
    dynamic exception,
    StackTrace? stacktrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warn,
          [message],
          {
            #exception: exception,
            #stacktrace: stacktrace,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void error(
    String? message, {
    dynamic exception,
    StackTrace? stacktrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #exception: exception,
            #stacktrace: stacktrace,
          },
        ),
        returnValueForMissingStub: null,
      );
}
